# IoT Smoke Detection Data Pipeline - Fixed Dockerfile
# Addresses dependency conflicts and compilation issues

FROM python:3.10-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    DEBIAN_FRONTEND=noninteractive \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies needed for compilation
RUN apt-get update && apt-get install -y \
    # Build essentials
    build-essential \
    gcc \
    g++ \
    # For google-re2 and other packages
    libabsl-dev \
    libre2-dev \
    pkg-config \
    # For psycopg2
    libpq-dev \
    # For other packages
    libffi-dev \
    libssl-dev \
    # Utilities
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Upgrade pip
RUN pip install --upgrade pip setuptools wheel

# Copy requirements files
COPY requirements_docker.txt /tmp/requirements_docker.txt
COPY requirements_fixed.txt /tmp/requirements_fixed.txt

# Install Python dependencies in stages to handle conflicts
# Stage 1: Core dependencies
RUN pip install --no-cache-dir \
    numpy==1.24.4 \
    pandas==2.0.3 \
    scikit-learn==1.3.2 \
    scipy==1.10.1

# Stage 2: Web framework (with version constraints)
RUN pip install --no-cache-dir \
    flask==2.2.5 \
    werkzeug==2.3.7 \
    flask-cors==4.0.0 \
    gunicorn==21.2.0

# Stage 3: Database and messaging
RUN pip install --no-cache-dir \
    sqlalchemy==1.4.53 \
    psycopg2-binary==2.9.9 \
    kafka-python==2.0.2

# Stage 4: PySpark with correct py4j
RUN pip install --no-cache-dir \
    py4j==0.10.9.7 \
    pyspark==3.5.0

# Stage 5: Remaining dependencies
RUN pip install --no-cache-dir -r /tmp/requirements_docker.txt || \
    echo "Some packages failed to install, continuing..."

# Alternative: Install without problematic packages
RUN pip install --no-cache-dir \
    python-dotenv==1.0.0 \
    pyyaml==6.0.1 \
    prometheus-client==0.19.0 \
    redis==5.0.1 \
    schedule==1.2.0 \
    requests==2.31.0 \
    loguru==0.7.2 \
    click==8.1.7

# Copy application code
COPY . /app/

# Create non-root user
RUN useradd --create-home --shell /bin/bash app && \
    chown -R app:app /app
USER app

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:5000/health')" || exit 1

# Expose port
EXPOSE 5000

# Default command
CMD ["gunicorn", "--bind", "0.0.0.0:5000", "--workers", "4", "app:app"]
